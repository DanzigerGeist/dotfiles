# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Shell and ZSH-specific environment variables.
CASE_SENSITIVE=false                                # [oh-my-zsh] If true, case-sensitive matching will be applied on filenames.
CD_LS_COMMAND=ll                                    # [cd-ls] Customize the command to be executed right after cd.
COMPLETION_WAITING_DOTS=false                       # [oh-my-zsh] If true, Oh My Zsh will print a red ellipsis to indicate that Zsh is still processing a completion request.
DISABLE_AUTO_TITLE=false                            # [oh-my-zsh] Oh My Zsh automatically sets the title of your terminal and tabs when running a command or printing the prompt.
DISABLE_FZF_AUTO_COMPLETION=false                   # [fzf] Set whether to load fzf auto-completion.
DISABLE_FZF_KEY_BINDINGS=false                      # [fzf] Set whether to disable key bindings (CTRL-T, CTRL-R, ALT-C).
DISABLE_LS_COLORS=false                             # [oh-my-zsh] Use this setting to disable the Oh My Zsh logic to automatically set ls color output.
EDITOR=nvim                                         # [zsh] Specifies the default terminal editor.
ENABLE_CORRECTION=true                              # [oh-my-zsh] If you use this setting, Oh My Zsh will use setopt correct_all, which tells Zsh to try to correct command names and filenames passed as arguments.
HISTORY_FILTER_EXCLUDE=("_KEY" "Bearer")            # [zsh-history-filter] Array of keywords to filter commands from cmd history.
HYPHEN_INSENSITIVE=false                            # [oh-my-zsh] If true, underscores (_) and hyphens (-) will be interchangeable. Case-sensitive completion must be off.
NVM_HOMEBREW=$(brew --prefix nvm)                   # [nvm] On Apple Silicon-based Macs, Homebrew is installed in /opt/homebrew.
VSCODE=codium                                       # [vscode] Sets the default VSC implementation to VSCodium (no telemetry). 
ZSH=$HOME/.oh-my-zsh                                # [oh-my-zsh] This should point to the oh my zsh home.
ZSH_COLORIZE_CHROMA_FORMATTER=terminal256           # [colorize] Make Chroma print nice colors.
ZSH_COLORIZE_TOOL=chroma                            # [colorize] Set plugin to use chroma.
ZSH_DOTENV_FILE=".env"                              # [dotenv] Sets the name of the env file to be loaded.
ZSH_DOTENV_PROMPT=true                              # [dotenv] Set to false if you don't want the confirmation message.
ZSH_FAST_ALIAS_TIPS_EXCLUDES=""                     # [zsh-fast-alias-tips] List of aliases to exclude from hints. 
ZSH_FAST_ALIAS_TIPS_PREFIX="ðŸ’¡ Alias: $(tput bold)" # [zsh-fast-alias-tips] Set the hint prefix. 
ZSH_FAST_ALIAS_TIPS_SUFFIX=$(tput sgr0)             # [zsh-fast-alias-tips] Set the hint suffix. 
ZSH_OLLAMA_COMMANDS=5                               # [zsh-ollama-command] Limit the suggested commands for Ollama.
ZSH_OLLAMA_COMMANDS_HOTKEY=^O                       # [zsh-ollama-command] Shortcut for the Ollama-based completions.
ZSH_OLLAMA_MODEL=codellama:13b                      # [zsh-ollama-command] Model for Ollama-based completions.
ZSH_OLLAMA_URL=http://localhost:11434               # [zsh-ollama-command] Ollama server API endpoint.
ZSH_THEME=powerlevel10k/powerlevel10k               # [oh-my-zsh] Set the ZSH theme.
ZSH_THEME_AZURE_PREFIX="<az:"                       # [azure] Sets the prefix of the azure_subscription.
ZSH_THEME_AZURE_SUFFIX=">"                          # [azure] Sets the suffix of the azure_subscription.
ZSH_TMUX_AUTOCONNECT=true                           # [tmux] Automatically connect to a previous session if it exists.
ZSH_TMUX_AUTOQUIT=true                              # [tmux] Automatically closes terminal once tmux exits.
ZSH_TMUX_AUTOSTART=false                            # [tmux] Automatically starts tmux.
ZSH_TMUX_AUTOSTART_ONCE=true                        # [tmux] Autostart only if tmux hasn't been started previously.
ZSH_TMUX_ITERM2=true                                # [tmux] Sets the -CC option for iTerm2 tmux integration.
ZSH_TMUX_UNICODE=true                               # [tmux] Sets tmux -u option to support unicode.
ZSH_THEME=powerlevel10k/powerlevel10k               # [oh-my-zsh] Set the ZSH theme.

# Additional shell and plugins configuration.
zstyle ':completion:*'                list-colors          ${(s.:.)LS_COLORS} # Set list-colors to enable filename colorizing
zstyle ':completion:*'                menu                 no                 # Force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*:descriptions'   format               '[%d]'             # Set descriptions format to enable group support
zstyle ':completion:*:git-checkout:*' sort                 false              # Disable sort when completing `git checkout`
zstyle ':fzf-tab:*'                   fzf-command          ftb-tmux-popup     # Make full use of tmux's "popup" feature
zstyle ':fzf-tab:*'                   fzf-flags            --color=fg:1,fg+:2 --bind=tab:accept # Custom fzf flags
zstyle ':fzf-tab:*'                   switch-group         '<' '>'            # Switch group using `<` and `>`
zstyle ':fzf-tab:*'                   use-fzf-default-opts yes                # To make fzf-tab follow FZF_DEFAULT_OPTS
zstyle ':fzf-tab:complete:cd:*'       fzf-preview          'eza -1 --color=always $realpath' # Preview directory's content with eza when completing cd
zstyle ':omz:plugins:alias-finder'    autoload             yes                # Disabled by default
zstyle ':omz:plugins:alias-finder'    cheaper              yes                # Disabled by default
zstyle ':omz:plugins:alias-finder'    exact                yes                # Disabled by default
zstyle ':omz:plugins:alias-finder'    longer               yes                # Disabled by default
zstyle ':omz:plugins:iterm2'          shell-integration    yes                # Apply the iTerm2 shell integration scripts
zstyle ':omz:plugins:keychain'        agents               gpg,ssh            # Use both gpg and ssh when loading keychain
zstyle ':omz:plugins:nvm'             autoload             yes                # Enable the nvm plugin to load automatically
zstyle ':omz:plugins:nvm'             lazy                 yes                # This will source nvm script only when using it, and will create a function for node, npm, npx, pnpm, pnpx, yarn, corepack and the command(s) specified by lazy-cmd option
zstyle ':omz:plugins:nvm'             lazy-cmd             tsc                # Extra commands for NVM lazy loading
zstyle ':omz:plugins:nvm'             silent-autoload      no                 # Optionally remove the output generated by NVM when autoloading
zstyle ':omz:plugins:ssh-agent'       agent-forwarding     yes                # Enable agent forwarding support
zstyle ':omz:plugins:ssh-agent'       lazy                 yes                # Lazy load the SSH keys
zstyle ':omz:plugins:ssh-agent'       quiet                yes                # Silence the plugin so that Powerline10k does not complain on first start
zstyle ':omz:update'                  frequency            7                  # Tells Oh My Zsh how often should automatic updates happen (in days)
zstyle ':omz:update'                  mode                 auto               # Automatically updates Oh My Zsh when a new version is available, without asking for confirmation
zstyle ':omz:update'                  verbosity            default            # Shows everything during update: git update process, changelog and success message

# Enable built-in OMZ plugins. 
plugins_standard=(
    aliases                  # Provides nice "als" command to print available aliases.
    # alias-finder             # Suggest an alias if there is one. 
    aws                      # Completions for AWS CLI.
    azure                    # Completions for Azure CLI.
    brew                     # Few shortcut aliases for Homebrew.
    catimg                   # Display images in CLI.
    chezmoi                  # Completions for chezmoi.
    chucknorris              # Chuck Norris MOTD ("chuck"/"chuck_cow").
    colored-man-pages        # Adds "colored" command to get colored man pages.
    colorize                 # Colored cat ("ccat"/"cless").
    command-not-found        # Installation hints for missing packages.
    common-aliases           # General purpose aliases.
    copybuffer               # Adds the ctrl-o keyboard shortcut to copy the current text in the command line to the system clipboard.
    copyfile                 # Provides an easy way to cat and pbcopy for file contents.
    copypath                 # Shortcut for copying folder path with pbcopy.
    cp                       # This plugin defines a cpv function that uses rsync.
    dash                     # This plugin adds command line functionality for Dash.
    docker                   # This plugin adds auto-completion and aliases for docker.
    docker-compose           # This plugin provides completion for docker-compose as well as some aliases for frequent docker-compose commands.
    doctl                    # This plugin provides completion for Doctl (DigitalOcean CLI).
    dotenv                   # Automatically load your project ENV variables from .env file when you cd into project root directory.
    extract                  # This plugin defines a function called extract that extracts the archive file you pass it.
    eza                      # This provides aliases that invoke the eza utility rather than ls.
    fzf                      # Enables fuzzy auto-completion and key bindings.
    gcloud                   # Completions for the Google Cloud SDK CLI.
    gh                       # Completions for the GitHub CLI.
    git-commit               # Adds several git aliases for conventional commit messages.
    git-flow                 # Adds completion and aliases for the git-flow command
    git-lfs                  # Provides aliases and functions for git-lfs.
    gitignore                # Enables you the use of gitignore.io from the command line.
    golang                   # Completions for Go, as well as some aliases for common Golang commands.
    gpg-agent                # Enables GPG's gpg-agent if it is not running.
    gradle                   # Completions and aliases for Gradle.
    helm                     # This plugin adds completion and aliases for Helm, the Kubernetes package manager.
    history-substring-search # Type in any part of any command from history and then press UP/DOWN.	
    httpie                   # Completion for HTTPie, a command line HTTP client.
    isodate                  # Aliases for common Date commands
    iterm2                   # Adds a few functions that are useful when using iTerm2.
    jenv                     # Initializes jenv and provides the jenv_prompt_info.
    jsontools                # Handy command line tools for dealing with json data.
    keychain                 # This plugin starts automatically keychain to set up and load credentials. 
    kops                     # This plugin provides completion for kops (Kubernetes Operations).
    kubectl                  # This plugin adds completion for the Kubernetes cluster manager.
    kubectx                  # This plugins adds kubectx_prompt_info() function.
    macos                    # Provides a few utilities to make it more enjoyable on macOS.
    man                      # Press ESC+man to add man to a previous command.
    mvn                      # Provides aliases as well as completion for the Apache Maven.
    nmap                     # Adds some useful aliases for Nmap.
    node                     # This plugin adds node-docs function that opens specific section in Node.js documentation. 
    npm                      # The npm plugin provides completion as well as adding many useful aliases.
    nvm                      # Completions for nvm (Node Version Manager).
    opentofu                 # Completion plugin for OpenTofu, a fork of Terraform that is open-source.
    pip                      # Completions for pip, the Python package manager.
    rsync                    # Aliases for frequent rsync commands.
    rust                     # This plugin adds completion for rustc, as well as for rustup and cargo.
    safe-paste               # Preventing any code from actually running while pasting.
    sbt                      # This plugin adds completion and aliases for sbt, Scala build tool.
    scala                    # Completion script for scala and scalac commands.
    spring                   # Adds autocomplete options for all Spring Boot commands.
    ssh                      # Provides host completion based off ~/.ssh/config.
    ssh-agent                # Starts automatically ssh-agent.
    terraform                # Adds completion for terraform, as well as aliases and a prompt function.
    thefuck                  # Press ESC twice to correct previous console command.
    tldr                     # Press ESC+tldr to add man to a previous command.
    tmux                     # Provides aliases for tmux, the terminal multiplexer.
    universalarchive         # Lets you compress files by a command ua <format> <files>, supporting various compression formats.
    urltools                 # This plugin provides two aliases to URL-encode and URL-decode strings.
    vscode		               # provides useful aliases to simplify the interaction between the CLI and VS Code.
    web-search               # Adds aliases for searching with Google, Wiki, Bing, YouTube and other popular services.
    z 			                 # Defines the z command that tracks your most visited directories 	
    zsh-interactive-cd       # Provides an interactive way to change directories in zsh using fzf.
    zsh-navigation-tools     # Set of tools like n-history, n-cd, n-kill.
)

# Enable custom plugins managed by Oh My Zsh.
plugins_custom=(
    auto-venv                      # Automatically activates the Python virtual environment in the current directory or its parent directories.
    cd-ls                          # Automatically `ls` after `cd`, because you know you always do it anyway.
    cd-reminder                    # Display reminders when cd-ing into specified directories. 
    def                            # Used to specify and run a default command in any directory of your choice.
    fast-syntax-highlighting       # This package provides syntax highlighting for the shell zsh.  
    fz                             # A shell plugin that seamlessly adds fuzzy search to tab completion of z. 
    fzf-tab                        # Replace zsh's default completion selection menu with fzf!
    fzf-tab-widgets                # Some extra widgets to use with the fzf-tab.
    git-clean-branch               # A plugin for oh-my-zsh that cleans up dead git branches. 
    git-sync                       # Sync git repositories and clean them up.		     
    jq                             # Interactively build jq expressions.
    mkcd                           # Combines mkdir and cd.
    nohup                          # Add `nohup` to the current command pressing the `Ctrl + H` shortcut.
    noreallyjustfuckingstopalready # Please OS X (or whatever your name is) just fucking reset your DNS cache please.
    ohmyzsh-full-autoupdate        # Automatically update OMZ plugins as well.
    prettyping                     # Wrapper around the standard ping tool with the objective of making the output prettier, more colorful, more compact, and easier to read.
    psgrep                         # Makes ps grep hide its own process from the results of a ps aux | grep.
    send                           # Turbo git flow: add our changes, submit a commit, pull from upstream (by default, the remote origin) and then push upstream.
    smartinput                     # When brackets/quotes are inputted, the corresponding brackets/quotes are automatically inputted.
    watch                          # Easily prefix your current or previous commands with watch by pressing Alt + w
    zman                           # Use fzf to quickly browse ZSH manuals.
    zsh-256color                   # Enhances the terminal environment with 256 colors, if available.
    zsh-allclear                   # Clears the terminal when you cd into $HOME. That's it.
    zsh-autosuggestions            # Suggests commands as you type based on history and completions.
    zsh-completions                # Additional completion definitions for Zsh.
    zsh-fast-alias-tips            # A Zsh plugin to help remembering those shell aliases you once defined.
    zsh-fzf-history-search         # A simple zsh plugin to replace Ctrl-r with an fzf-driven, searchable list of history.
    zsh-fzf-packagemanager         # Adds commands for installing tools via various package managers using fzf.
    zsh-fzf-utils                  # fzf-utils is a zsh plugin that provides functions which use fzf to do cool things.
    zsh-help                       # A zsh plugin to colorize `XXX --help`.
    zsh-history-filter             # Automatically exclude commands from being inserted into your permanent history.
    zsh-not-vim                    # Shames the user for forgetting they weren't in vim.
    zsh-ollama-command             # Integrates the Ollama AI model with fzf to provide intelligent command suggestions.
    zsh-plugin-require             # A function that helps you require commands, e.g. require <command> <install command>.
    zsh-show-path                  # Shows the $PATH line by line.
)

# Merge built-in and custom plugins into a single list.
plugins=(${plugins_standard[@]} ${plugins_custom[@]})

ensure_omz_itself_installed() {
  local omz_dir="$1"
  if [ ! -d "$omz_dir" ]; then
    echo "WARNING! Oh My ZSH is not installed - running installation script!"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" --unattended --keep-zshrc
  fi
}

ensure_omz_themes_installed() {
  local resource_name="$1"
  local resource_url="$2"
  local oh_my_zsh_resource_dir=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/$resource_name
  if [ ! -d "$oh_my_zsh_resource_dir" ]; then
    echo "Installing theme $resource_name in path: $oh_my_zsh_resource_dir"
    git clone --quiet --depth 1 "$resource_url" "$oh_my_zsh_resource_dir"
  fi
}

ensure_omz_plugin_installed() {
  local resource_name="$1"
  local resource_url="$2"
  local oh_my_zsh_resource_dir=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/$resource_name
  if [[ -z "${plugins_custom[*]}" ]]; then
    echo "Error: plugins_custom global array is not defined or empty."
    return 1
  fi
  if [[ ! " ${plugins_custom[@]} " =~ " ${resource_name} " ]]; then
    return 0
  fi
  if [[ ! -d "$oh_my_zsh_resource_dir" ]]; then
    echo "Installing plugin $resource_name in path: $oh_my_zsh_resource_dir"
    git clone --quiet --depth 1 "$resource_url" "$oh_my_zsh_resource_dir"
  fi
}

delete_omz_unused_plugins() {
    local omz_custom_plugins_dir="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins"
    if [[ ! -d $omz_custom_plugins_dir ]]; then
        echo "Custom plugins directory not found: $omz_custom_plugins_dir"
        return 1
    fi
    for plugin_dir in "$omz_custom_plugins_dir"/*; do
        if [[ -d $plugin_dir ]]; then
            plugin_name=$(basename "$plugin_dir")            
            if [[ ! " ${plugins_custom[@]} " =~ " ${plugin_name} " ]]; then
                echo "Deleting unused plugin: $plugin_name"
                rm -rf "$plugin_dir"
            fi
        fi
    done
}

ensure_omz_itself_installed $ZSH
delete_omz_unused_plugins   $plugins_custom

ensure_omz_themes_installed "powerlevel10k"                  "https://github.com/romkatv/powerlevel10k.git"
ensure_omz_plugin_installed "auto-venv"                      "https://github.com/Skylor-Tang/auto-venv.git"
ensure_omz_plugin_installed "cd-ls"                          "https://github.com/zshzoo/cd-ls.git"
ensure_omz_plugin_installed "cd-reminder"                    "https://github.com/bartboy011/cd-reminder.git"
ensure_omz_plugin_installed "def"                            "https://github.com/thevinter/def.git"
ensure_omz_plugin_installed "fast-syntax-highlighting"       "https://github.com/zdharma-continuum/fast-syntax-highlighting.git"
ensure_omz_plugin_installed "fz"                             "https://github.com/mrjohannchang/fz.sh.git"
ensure_omz_plugin_installed "fzf-fasd"                       "https://github.com/wookayin/fzf-fasd.git"
ensure_omz_plugin_installed "fzf-tab"                        "https://github.com/Aloxaf/fzf-tab.git"
ensure_omz_plugin_installed "fzf-tab-widgets"                "https://github.com/tom-power/fzf-tab-widgets"
ensure_omz_plugin_installed "git-clean-branch"               "https://github.com/gobriansteele/git-clean-branch.git"
ensure_omz_plugin_installed "git-fuzzy"                      "https://github.com/bigH/git-fuzzy.git"
ensure_omz_plugin_installed "git-sync"                       "https://github.com/caarlos0-graveyard/zsh-git-sync.git"
ensure_omz_plugin_installed "jq"                             "https://github.com/reegnz/jq-zsh-plugin.git"
ensure_omz_plugin_installed "mkcd"                           "https://github.com/marvinroman/oh-my-zsh-mkcd-plugin.git"
ensure_omz_plugin_installed "nohup"                          "https://github.com/micrenda/zsh-nohup.git"
ensure_omz_plugin_installed "noreallyjustfuckingstopalready" "https://github.com/eventi/noreallyjustfuckingstopalready.git"
ensure_omz_plugin_installed "ohmyzsh-full-autoupdate"        "https://github.com/Pilaton/OhMyZsh-full-autoupdate.git"
ensure_omz_plugin_installed "prettyping"                     "https://github.com/unixorn/prettyping.git"
ensure_omz_plugin_installed "printdocker"                    "https://github.com/elvitin/printdocker-zsh-plugin.git"
ensure_omz_plugin_installed "psgrep"                         "https://github.com/voidzero/omz-plugin-psgrep.git"
ensure_omz_plugin_installed "send"                           "https://github.com/robertzk/send.zsh.git"
ensure_omz_plugin_installed "smartinput"                     "https://github.com/momo-lab/zsh-smartinput.git"
ensure_omz_plugin_installed "watch"                          "https://github.com/enrico9034/watch-plugin-zsh.git"
ensure_omz_plugin_installed "zman"                           "https://github.com/mattmc3/zman.git"
ensure_omz_plugin_installed "zsh-256color"                   "https://github.com/chrissicool/zsh-256color.git"
ensure_omz_plugin_installed "zsh-allclear"                   "https://github.com/givensuman/zsh-allclear.git"
ensure_omz_plugin_installed "zsh-autosuggestions"            "https://github.com/zsh-users/zsh-autosuggestions.git"
ensure_omz_plugin_installed "zsh-completions"                "https://github.com/zsh-users/zsh-completions.git"
ensure_omz_plugin_installed "zsh-fast-alias-tips"            "https://github.com/decayofmind/zsh-fast-alias-tips.git"
ensure_omz_plugin_installed "zsh-fzf-history-search"         "https://github.com/joshskidmore/zsh-fzf-history-search.git"
ensure_omz_plugin_installed "zsh-fzf-packagemanager"         "https://github.com/goarano/zsh-fzf-packagemanager.git"
ensure_omz_plugin_installed "zsh-fzf-utils"                  "https://github.com/redxtech/zsh-fzf-utils.git"
ensure_omz_plugin_installed "zsh-help"                       "https://github.com/Freed-Wu/zsh-help.git"
ensure_omz_plugin_installed "zsh-history-filter"             "https://github.com/MichaelAquilina/zsh-history-filter.git"
ensure_omz_plugin_installed "zsh-not-vim"                    "https://github.com/redxtech/zsh-not-vim.git"
ensure_omz_plugin_installed "zsh-notify"                     "https://github.com/luismayta/zsh-notify.git"
ensure_omz_plugin_installed "zsh-ollama-command"             "https://github.com/plutowang/zsh-ollama-command.git"
ensure_omz_plugin_installed "zsh-plugin-require"             "https://github.com/aubreypwd/zsh-plugin-require.git"
ensure_omz_plugin_installed "zsh-show-path"                  "https://github.com/redxtech/zsh-show-path.git"

# FINAL 1 - Load oh-my-zsh.
source $ZSH/oh-my-zsh.sh

# FINAL 2 - Load powerlevel10k.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# FINAL 3 - Override some of the keybindings.
bindkey '^b' copybuffer         # [Ctrl+B] Copy the active line from the command line buffer.
bindkey '^j' jq-complete        # [Ctrl+J] Triggers the interactive jq shell on the current command output with fzf-like TUI.
bindkey '^h' nohup-command-line # [Ctrl+H] Wraps the currect command into a nohup.
bindkey '^w' watch-command-line # [Ctrw+W] Wraps the current command into a watch.
